@startuml

title __CHESSGAME's Class Diagram__\n

  namespace ChessGame {
    class ChessGame.Bishop {
        + Bishop()
        + Tile()
        + isValidMove()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Board {
        - Tiles : Tile[][]
        + Board()
        + getNumberOfCols()
        + getNumberOfRows()
        + getTileAt()
        + init()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Chess {
        {static} - BLACK_BISHOP_KEY : String
        {static} - BLACK_KING_KEY : String
        {static} - BLACK_KNIGHT_KEY : String
        {static} - BLACK_PAWN_KEY : String
        {static} - BLACK_QUEEN_KEY : String
        {static} - BLACK_ROOK_KEY : String
        {static} - BLACK_Tile_KEY : String
        {static} - WHITE_BISHOP_KEY : String
        {static} - WHITE_KING_KEY : String
        {static} - WHITE_KNIGHT_KEY : String
        {static} - WHITE_PAWN_KEY : String
        {static} - WHITE_QUEEN_KEY : String
        {static} - WHITE_ROOK_KEY : String
        {static} - WHITE_Tile_KEY : String
        + Chess()
        {static} + access$000()
        + getBoard()
        + getCurrentPlayer()
        {static} + main()
        + move()
        + switchPlayers()
        - centre()
        - init()
        - initPieces()
        - setPiece()
        - shutdown()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Chess$1 {
        + windowClosing()
        ~ Chess$1()
    }
  }
  

  namespace ChessGame {
    class ChessGame.King {
        + King()
        + Tile()
        + isValidMove()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Knight {
        + Knight()
        + Tile()
        + isValidMove()
    }
  }
  

  namespace ChessGame {
    class ChessGame.MoveListener {
        + MoveListener()
        + mouseClicked()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Pawn {
        + Pawn()
        + Tile()
        + isValidMove()
    }
  }
  

  namespace ChessGame {
    abstract class ChessGame.Piece {
        - image : String
        {abstract} + Tile()
        + getImage()
        + getOwner()
        + getTile()
        {abstract} + isValidMove()
        + setTile()
        # Piece()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Player {
        + colour : Color
        + Player()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Queen {
        + Queen()
        + Tile()
        + isValidMove()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Rook {
        + Rook()
        + Tile()
        + isValidMove()
    }
  }
  

  namespace ChessGame {
    class ChessGame.Tile {
        - col : int
        - isActive : boolean
        - row : int
        + Tile()
        + getCol()
        + getPiece()
        + getRow()
        + paint()
        + setActive()
        + setPiece()
    }
  }
  

  ChessGame.Bishop -up-|> ChessGame.Piece
  ChessGame.Board -up-|> javax.swing.JPanel
  ChessGame.Chess -up-|> javax.swing.JFrame
  ChessGame.Chess o-- ChessGame.Player : blackPlayer
  ChessGame.Chess o-- ChessGame.Board : board
  ChessGame.Chess o-- ChessGame.Player : currentPlayer
  ChessGame.Chess o-- ChessGame.Player : whitePlayer
  ChessGame.Chess$1 -up-|> java.awt.event.WindowAdapter
  ChessGame.Chess$1 o-- ChessGame.Chess : this$0
  ChessGame.King -up-|> ChessGame.Piece
  ChessGame.Knight -up-|> ChessGame.Piece
  ChessGame.MoveListener -up-|> java.awt.event.MouseAdapter
  ChessGame.MoveListener o-- ChessGame.Chess : game
  ChessGame.MoveListener o-- ChessGame.Tile : startTile
  ChessGame.Pawn -up-|> ChessGame.Piece
  ChessGame.Piece o-- ChessGame.Tile : Tile
  ChessGame.Piece o-- ChessGame.Player : owner
  ChessGame.Queen -up-|> ChessGame.Piece
  ChessGame.Rook -up-|> ChessGame.Piece
  ChessGame.Tile -up-|> java.awt.Canvas
  ChessGame.Tile o-- ChessGame.Piece : piece


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
